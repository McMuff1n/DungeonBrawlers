using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace classPractice
{

    class Program
    {
        public static Bandit Bandit1 = new Bandit(1); //Creates a new bandit of the type fighter
        static bool IsMage = false, IsFighter = false, IsRogue = false, PlayerDeath = false;
        public static int PlayerHP, PlayerAC;
        static string[] MageSpells = new string[6] { "Force blast", "Strengthen", "Curse", "False life", "Magic shield", "Mage armor" },
            FighterAbilities = new string[3] { "Slash", "Heavy slash", "Taunt" },
            RogueAbilities = new string[4] { "Stab", "Hide", "Snipe", "Defensive stance" };

        static void Main(string[] args)
        {
            Console.CursorVisible = false;
            ClassSelector();
            Combat();
        }

        static void ClassSelector()
        {
            while (IsFighter == false && IsRogue == false && IsMage == false)
            {
                Console.Clear();
                Console.WriteLine("VÃ¤lj din klass: \n\n" +
                    "   Fighter\n" +
                    "   Rogue\n" +
                    "   Mage\n"); //Prints the different alternatives
                int classNum = Selector(2, 1, 4, 2, 1) - 1;
                ConfirmClass(classNum); //Calls for the method that lets you confirm your class
            }
        }
        static void ConfirmClass(int classNum)
        {
            Console.Clear();
            switch (classNum)
            {
                case 1:
                    Console.WriteLine("Are you sure that you want to select fighter as your class? ");
                    break;
                case 2:
                    Console.WriteLine("Are you sure that you want to select rogue as your class? ");
                    break;
                case 3:
                    Console.WriteLine("Are you sure that you want to select mage as your class? ");
                    break;
            }
            Console.WriteLine("\n" +
                "   Yes\n" +
                "   No");
            int classConfirmation = Selector(2, 1, 3, 2, 1) - 1;

            if (classConfirmation == 1) //Checks if the user did confirm his/her class
            {
                switch (classNum)
                {
                    case 1:
                        IsFighter = true;
                        PlayerAC = 18;
                        PlayerHP = 100;
                        break;
                    case 2:
                        IsRogue = true;
                        PlayerAC = 16;
                        PlayerHP = 80;
                        break;
                    case 3:
                        IsMage = true;
                        PlayerAC = 10;
                        PlayerHP = 70;
                        break;
                }
            }
        }
        static void Combat()
        {
            Console.Clear();
            Console.WriteLine("There is a bandit in front of you.");
            Console.ReadLine();
            while (Bandit1.HP > 0 && PlayerHP > 0)
            {
                Console.Clear();
                if (IsFighter == true)
                    PcFighterAction();
                else if (IsRogue == true)
                    PcRogueAction();
                else if (IsMage == true)
                    PcMageAction();

                if (Bandit1.HP < 1)
                    break;

                EnemyAction();

                if (PlayerHP < 1)
                    PlayerDeath = true;
            }
            if(PlayerDeath == true)
            {
                Console.WriteLine("You died, \n GAME OVER");
            }
            else
            {
                Console.WriteLine("You gloriously defeated the bandit");
            }
            Console.ReadLine();
        }
        static void PcFighterAction()
        {
            Console.WriteLine("Choose what you want to do");
            for (int i = 0; i < FighterAbilities.Length; i++)
                Console.Write("   " + FighterAbilities[i] + "\n");
            int action = Selector(2, 1, 3, 2, 1);
        }
        static void PcRogueAction()
        {
            Console.WriteLine("Choose what you want to do");
            for (int i = 0; i < RogueAbilities.Length; i++)
                Console.Write("\n   " + RogueAbilities[i]);
            int action = Selector(2, 1, 5, 2, 1);
        }
        static void PcMageAction()
        {
            Console.WriteLine("Choose what you want to do\n\n   Melee attack\n   Cast a spell");
            int action = Selector(2, 1, 3, 2, 1);
            if (action == 2)
            {
                Console.WriteLine("You make a melee attack");
                Console.ReadLine();
            }
            else if (action == 3)
            {
                CastSpell("player");
            }
        }
        static void EnemyAction()
        {

        }

        static void CastSpell(string casterType)
        {
            Console.WriteLine("Yeet");
            Console.ReadLine();
        }
        static void CombatWin(string enemyType, string enemyClass)
        {

        } //Called if the player defeats the enemy
        static void CombatLoss(string enemyType, string enemyClass)
        {

        } //Called if the player dies

        static int Selector(int yPos, int xPos, int yMax, int yMin, int moveY) //This will be the base of all choices, a selector that uses the up- and downarrows for navigation
        {
            Console.SetCursorPosition(xPos, yPos);
            for (;;)
            {
                Console.Write("\b\b ");
                Console.SetCursorPosition(xPos, yPos);
                Console.Write(">");
                ConsoleKeyInfo info = Console.ReadKey();
                if (info.Key == ConsoleKey.DownArrow)
                {
                    if (yPos >= yMax)
                        yPos = yMin;
                    else
                        yPos = yPos + moveY;
                }
                else if (info.Key == ConsoleKey.UpArrow)
                {
                    if (yPos <= yMin)
                        yPos = yMax;
                    else
                        yPos = yPos - moveY;
                }
                else if (info.Key == ConsoleKey.Enter)
                    return yPos;
                else
                {
                    Console.Write("\b \b");
                }
            }
        }
    }
}
